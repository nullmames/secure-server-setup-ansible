---
# Arbitrum support structure with host networking
# Ports:
#  - custom_port_prefix: 118
#  - Nitro: 11847/tcp (rpc)

- name: Create arbitrum data folder
  ansible.builtin.file:
    dest: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ folder }}"
    - "{{ folder }}/arbitrum-data"
    - "{{ user_dir }}/docker-compose/tmp"

- name: Get current user and group
  ansible.builtin.shell:
    cmd: echo "$(id -u):$(id -g)"
  register: current_user

- name: Create a network
  community.docker.docker_network:
    name: "{{ network }}_net"
    state: present
    ipam_config:
      - subnet: 172.0.{{ custom_port_prefix }}.0/24
        gateway: 172.0.{{ custom_port_prefix }}.1

- name: Pull and run nitro container
  community.docker.docker_container:
    name: "{{ execution_container_name }}"
    image: offchainlabs/nitro-node:{{ execution_container_version }}
    restart_policy: unless-stopped
    state: started
    stop_timeout: 600
    pull: true
    user: "{{ current_user.stdout }}"
    networks:
      - name: "{{ network }}_net"
    ports:
      # rpc
      - "{{ nebula_internal_ip_addr }}:{{ custom_port_prefix }}47:{{ custom_port_prefix }}47"
      - 127.0.0.1:{{ custom_port_prefix }}47:{{ custom_port_prefix }}47
    volumes:
      - "{{ folder }}/arbitrum-data:/home/user/.arbitrum"
      - "{{ user_dir }}/docker-compose/tmp:/tmp"
    command:
      - --parent-chain.connection.url={{ ethereum_l1 }}
      - --parent-chain.blob-client.beacon-url={{ ethereum_l1_beacon }}
      - --chain.name={{ arbitrum_chain_name }}
      # rpc
      - --http.port={{ custom_port_prefix }}47
      - --http.addr=0.0.0.0
      - --http.vhosts=*
      - --http.corsdomain=*
      - --http.api=net,web3,eth,arb
      - --ws.port={{ custom_port_prefix }}48
      - --ws.addr=0.0.0.0
      - --ws.origins=*
      - --execution.rpc.gas-cap=0
      # To get latest snap
      - --init.latest=pruned
      - --node.staker.enable=false # Remove watchtower mode
      - --execution.rpc.tx-fee-cap=0 # Per RMN Documentation
      - --rpc.max-batch-response-size=200000000 # Per RMN Documentation
      - --rpc.batch-request-limit=20000 # Per RMN Documentation
      # - --init.prune=full # Prune at startup
