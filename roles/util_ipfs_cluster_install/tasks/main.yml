---
# ipfs-cluster-service block
- name: Register installed ipfs-cluster-service version
  ansible.builtin.shell: "/usr/local/bin/ipfs-cluster-service version"
  register: ipfsclusterversion
  ignore_errors: true

- name: Download and install ipfs-cluster-service
  when: ipfsclusterversion.stdout != ipfs_cluster_release
  notify: Restart ipfs-cluster service
  block:
    - name: Download ipfs-cluster-service
      ansible.builtin.get_url:
        url: "https://dist.ipfs.tech/ipfs-cluster-service/v{{ ipfs_cluster_release }}/ipfs-cluster-service_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
        dest: "{{ user_dir }}/source/ipfs-cluster-service_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
        mode: "0755"

    - name: Install ipfs-cluster-service daemon
      block:
        - name: Unarchive ipfs-cluster-service release
          ansible.builtin.unarchive:
            src: "{{ user_dir }}/source/ipfs-cluster-service_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
            dest: "{{ user_dir }}/source"
            remote_src: true

    - name: Install ipfs-cluster-service release
      become: true
      ansible.builtin.copy:
        src: "{{ user_dir }}/source/ipfs-cluster-service/ipfs-cluster-service"
        dest: "/usr/local/bin"
        owner: root
        group: root
        mode: "0755"
        remote_src: true
        force: true

    - name: Delete temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ user_dir }}/source/ipfs-cluster-service_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
        - "{{ user_dir }}/source/ipfs-cluster-service/"

- name: Check if node has been initialized
  ansible.builtin.stat:
    path: "{{ user_dir }}/.ipfs-cluster"
  register: node_initialized

- name: Init ipfs-cluster
  when: not node_initialized.stat.exists
  ansible.builtin.command: "ipfs-cluster-service init"
  environment:
    PATH: "{{ path }}"

- name: Copy ipfs-cluster files
  ansible.builtin.template:
    src: "{{ item }}-{{ ipfs_role }}.j2"
    dest: "{{ user_dir }}/.ipfs-cluster/{{ item }}"
    owner: rhino
    group: rhino
    mode: "0644"
  with_items:
    - peerstore
    - service.json
  notify: Restart ipfs-cluster service

- name: Open ipfs-cluster p2p port in ufw
  become: true
  community.general.ufw:
    rule: allow
    proto: tcp
    port: "9096"
    comment: External - ipfs-cluster p2p

- name: Copy service file
  become: true
  ansible.builtin.template:
    src: "ipfs-cluster.service.j2"
    dest: "/etc/systemd/system/ipfs-cluster.service"
    owner: root
    group: root
    mode: "0644"
  notify: Restart ipfs-cluster service

- name: Enable ipfs-cluster.service
  become: true
  ansible.builtin.service:
    name: ipfs-cluster
    daemon_reload: true
    enabled: true
    state: started

# ipfs-cluster-ctl block
- name: Register installed ipfs-cluster-ctl version
  ansible.builtin.shell: "/usr/local/bin/ipfs-cluster-ctl version"
  register: ipfsclusterctlversion
  ignore_errors: true

- name: Download and install ipfs-cluster-ctl
  when: ipfsclusterctlversion.stdout != ipfs_cluster_ctl_release
  block:
    - name: Download ipfs-cluster-ctl
      ansible.builtin.get_url:
        url: "https://dist.ipfs.tech/ipfs-cluster-ctl/v{{ ipfs_cluster_release }}/ipfs-cluster-ctl_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
        dest: "{{ user_dir }}/source/ipfs-cluster-ctl_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
        mode: "0755"

    - name: Install ipfs-cluster-ctl application
      block:
        - name: Unarchive ipfs-cluster-ctl release
          ansible.builtin.unarchive:
            src: "{{ user_dir }}/source/ipfs-cluster-ctl_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
            dest: "{{ user_dir }}/source"
            remote_src: true

    - name: Install ipfs-cluster-ctl application
      become: true
      ansible.builtin.copy:
        src: "{{ user_dir }}/source/ipfs-cluster-ctl/ipfs-cluster-ctl"
        dest: "/usr/local/bin"
        owner: root
        group: root
        mode: "0755"
        remote_src: true
        force: true

    - name: Delete temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ user_dir }}/source/ipfs-cluster-ctl_v{{ ipfs_cluster_release }}_linux-amd64.tar.gz"
        - "{{ user_dir }}/source/ipfs-cluster-ctl"
