---
- name: Check version of node
  ignore_errors: true
  ansible.builtin.shell: "set -o pipefail && curl -sL localhost:8080/v1/ | jq -r .git_hash"
  args:
    executable: /usr/bin/bash
  register: aptos_version

- name: Build new version & install
  when: (aptos_version.stdout != node_version) or (aptos_version.stdout is none)
  notify: Restart aptos-node
  block:
    - name: Update aptos repo for node install
      ansible.builtin.git:
        repo: "{{ repo }}"
        dest: "{{ user_dir }}/source/{{ network }}"
        version: "{{ node_version }}"
        update: true
        force: true
        recursive: true

    - name: Build aptos and aptos-node
      ansible.builtin.command: "nice -n 15 {{ item }}"
      args:
        chdir: "{{ user_dir }}/source/{{ network }}"
      loop:
        - "rustup override unset"
        - "cargo clean"
        - "cargo build --jobs {{ (ansible_processor_vcpus * (2 / 3)) | round | int }} --package aptos-node --profile {{ build_profile }}"
      environment:
        PATH: "{{ path }}"

    - name: Archive exiting binaries
      become: true
      when: aptos_version.stdout | length > 0
      ansible.builtin.copy:
        src: "/usr/local/bin/{{ item }}"
        dest: "/usr/local/bin/{{ item }}-{{ aptos_version.stdout }}"
        owner: root
        group: root
        mode: "0755"
        remote_src: true
        force: true
      loop:
        - aptos-node

    - name: Copy new binaries
      become: true
      ansible.builtin.copy:
        src: "{{ user_dir }}/source/{{ network }}/target/{{ build_profile }}/{{ item }}"
        dest: "/usr/local/bin"
        owner: root
        group: root
        mode: "0755"
        remote_src: true
        force: true
      loop:
        - aptos-node
