---
- name: Register installed ipfs version
  ansible.builtin.shell: '/usr/local/bin/ipfs version | cut -d " " -f3'
  register: ipfsversion
  ignore_errors: true

- name: Download and install ipfs
  when: ipfsversion.stdout != ipfs_release
  notify: Restart ipfs service
  block:
    - name: Download ipfs
      ansible.builtin.get_url:
        url: "https://dist.ipfs.tech/kubo/v{{ ipfs_release }}/kubo_v{{ ipfs_release }}_linux-amd64.tar.gz"
        dest: "{{ user_dir }}/source/kubo_v{{ ipfs_release }}_linux-amd64.tar.gz"
        mode: "0700"

    - name: Unarchive ipfs release
      ansible.builtin.unarchive:
        src: "{{ user_dir }}/source/kubo_v{{ ipfs_release }}_linux-amd64.tar.gz"
        dest: "{{ user_dir }}/source"
        remote_src: true

    - name: Install ipfs release
      become: true
      ansible.builtin.copy:
        src: "{{ user_dir }}/source/kubo/ipfs"
        dest: "/usr/local/bin"
        owner: root
        group: root
        mode: "0755"
        remote_src: true
        force: true

    - name: Delete temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ user_dir }}/source/kubo_v{{ ipfs_release }}_linux-amd64.tar.gz"
        - "{{ user_dir }}/source/kubo/"

- name: Check if node has been initialized
  ansible.builtin.stat:
    path: "{{ user_dir }}/.ipfs"
  register: node_initialized

- name: Init ipfs node
  when: not node_initialized.stat.exists
  ansible.builtin.command: "ipfs init --empty-repo --profile pebbleds"
  args:
    creates: "{{ user_dir }}/.ipfs/config"
  environment:
    PATH: "{{ path }}"

- name: IPFS config via cli, including node bootstrap
  ansible.builtin.command: "{{ item }}"
  environment:
    PATH: "{{ path }}"
  with_items:
    # Addresses
    - ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080
    - ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001
    # Caching
    - ipfs config Datastore.Bloomfilter 5242880
    # Connection controls. Disable QUIC for memory leak
    - ipfs config Swarm.ConnMgr.HighWater --json 96
    - ipfs config Swarm.ConnMgr.LowWater --json 32
    - ipfs config Swarm.ConnMgr.GracePeriod 20s
    - ipfs config Routing.AcceleratedDHTClient --json 'true'
    - ipfs config Swarm.Transports.Network.QUIC --json false
    - ipfs config Swarm.Transports.Network.WebTransport --json false
    # Bootstraps
    - ipfs bootstrap add /ip4/213.190.31.83/tcp/4001/p2p/12D3KooWG1w9YR36mmn9ThQcnimrqt9pPBsDkuK3VfBuau4h2siy # ipp-fra-2700
    - ipfs bootstrap add /ip4/79.137.99.221/tcp/4001/p2p/12D3KooWQmmZd8GeNME8WdzY1N9PwmkYPm5HBqBz2tJsJYhny7oJ # ovh-rbx-3239701
    - ipfs config --json Peering.Peers '[{"ID":"Qma8ddFEQWEU8ijWvdxXm3nxU7oHsRtCykAaVz8WUYhiKn","Addrs":["/dnsaddr/production-ipfs-peer.pinata.cloud"]}]' # Pinata

- name: IPFS StorageMax to 6TB
  ansible.builtin.command: "{{ item }}"
  environment:
    PATH: "{{ path }}"
  with_items:
    - "ipfs config Datastore.StorageMax 6000GB"

- name: Open ipfs p2p port in ufw
  become: true
  community.general.ufw:
    rule: allow
    proto: tcp
    port: "4001"
    comment: External - ipfs p2p

- name: Increase UDP Receive Buffer Size
  become: true
  ansible.posix.sysctl:
    name: net.core.rmem_max
    value: 2500000
    state: present
    sysctl_set: true

- name: Copy service file
  notify: Restart ipfs service
  become: true
  ansible.builtin.template:
    src: "ipfs.service.j2"
    dest: "/etc/systemd/system/ipfs.service"
    owner: root
    group: root
    mode: "0644"

- name: Enable ipfs.service
  become: true
  ansible.builtin.service:
    name: ipfs
    daemon_reload: true
    enabled: true
    state: started
