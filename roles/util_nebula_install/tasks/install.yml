- name: Ensure /etc/nebula directory exists
  ansible.builtin.file:
    path: /etc/nebula
    state: directory
    mode: "0700"
    owner: root
    group: root

- name: Check for existing Nebula install
  ansible.builtin.stat:
    path: "/etc/nebula/nebula"
  register: installed_nebula_stats

- name: Get Nebula version (if installed)
  when: installed_nebula_stats.stat.exists
  ansible.builtin.command: "/etc/nebula/nebula -version"
  register: installed_nebula_version_out
  changed_when: false
  failed_when: false

- name: Extract Nebula version from command output
  when: installed_nebula_stats.stat.exists
  ansible.builtin.set_fact:
    installed_nebula_version: "{{ installed_nebula_version_out.stdout.split(' ')[1] }}"

- name: Set url for architecture
  ansible.builtin.set_fact:
    nebula_arch: "{% if ansible_architecture == 'aarch64' %}arm64{% else %}amd64{% endif %}"

- name: Download & Extract Nebula
  when: ( installed_nebula_version | default( nebula_version ) != nebula_version ) or ( not installed_nebula_stats.stat.exists )
  ansible.builtin.unarchive:
    src: "https://github.com/slackhq/nebula/releases/download/v{{ nebula_version }}/nebula-linux-{{ nebula_arch }}.tar.gz"
    dest: "/etc/nebula"
    remote_src: true
  notify: Restart nebula

- name: Ensure Nebula binaries permissions are correct
  ansible.builtin.file:
    path: "/etc/nebula/{{ item }}"
    owner: root
    group: root
    mode: "0700"
  with_items:
    - nebula
    - nebula-cert

- name: Enable Nebula subnet in firewall
  community.general.ufw:
    rule: allow
    src: "100.100.0.0/22"
    comment: "Internal - Nebula"

- name: Open external udp port in firewall
  community.general.ufw:
    rule: allow
    proto: udp
    port: "4242"
    comment: "External - Nebula p2p"
