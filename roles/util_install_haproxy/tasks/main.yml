---
- name: Instally haproxy on Debian
  when: ansible_distribution == "Debian"
  become: true
  block:
    - name: Install haproxy repository key
      ansible.builtin.get_url:
        url: "https://haproxy.debian.net/bernat.debian.org.gpg"
        dest: /usr/share/keyrings/haproxy.debian.net.asc
        mode: "0644"
        force: true

    - name: Remove outdated haproxy repositories if exists
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/haproxy_debian_net.list
        state: absent

    - name: Install haproxy repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/haproxy.debian.net.asc] http://haproxy.debian.net/ {{ ansible_distribution_release }}-backports-{{ haproxy_release }} main"
        filename: haproxy_{{ haproxy_release }}
        state: present
        update_cache: true

- name: Install haproxy on Ubuntu
  when: ansible_distribution == "Ubuntu"
  become: true
  block:
    - name: Install haproxy repository key
      ansible.builtin.get_url:
        url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xcffb779aadc995e4f350a060505d97a41c61b9cd"
        dest: /usr/share/keyrings/haproxy.debian.net.asc
        mode: "0644"
        force: true

    - name: Find outdated haproxy repositories
      ansible.builtin.find:
        paths: /etc/apt/sources.list.d
        patterns: "ppa_launchpadcontent_net_vbernat_haproxy_*_ubuntu.list"
      register: outdated_haproxy_repositories

    - name: Remove outdated haproxy repositories
      ansible.builtin.file:
        path: "{{ item['path'] }}"
        state: absent
      with_items: "{{ outdated_haproxy_repositories['files'] }}"

    - name: Install haproxy repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/haproxy.debian.net.asc] https://ppa.launchpadcontent.net/vbernat/haproxy-{{ haproxy_release }}/ubuntu {{ ansible_distribution_release }} main"
        filename: haproxy_{{ haproxy_release }}
        state: present
        update_cache: true

- name: Install haproxy
  become: true
  ansible.builtin.apt:
    name:
      - haproxy={{ haproxy_release }}.*
    state: present
    update_cache: false
  notify: Restart haproxy

- name: Copy all certificates
  become: true
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/ssl/"
    owner: root
    group: root
    mode: "0644"
  notify: Restart haproxy
  with_fileglob: "templates/certs/*.pem"

- name: Copy all check scripts
  become: true
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/var/lib/haproxy/"
    owner: root
    group: root
    mode: "0755"
  notify: Restart haproxy
  with_fileglob: "templates/scripts/*.sh"

- name: Delete and create fragments directory
  become: true
  ansible.builtin.file:
    path: /etc/haproxy/fragments
    state: "{{ item }}"
    mode: "0755"
  loop:
    - absent
    - directory

- name: Download whitelists
  become: true
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/etc/haproxy/fragments/{{ item.name }}"
    mode: "0644"
  loop:
    - name: "cloudflare_whitelist_ipv4.txt"
      url: "https://www.cloudflare.com/ips-v4/#"
    - name: "cloudflare_whitelist_ipv6.txt"
      url: "https://www.cloudflare.com/ips-v6/#"
    - name: "uptimerobot_whitelist.txt"
      url: "https://uptime.betterstack.com/ips.txt"

- name: Concatenate whitelist files
  notify: Restart haproxy
  become: true
  ansible.builtin.assemble:
    src: "/etc/haproxy/fragments/"
    dest: "/etc/haproxy/whitelist.txt"
    mode: "0644"

- name: Copy haproxy config
  notify: Restart haproxy
  become: true
  ansible.builtin.template:
    src: "haproxy-{{ haproxy_config }}.cfg"
    dest: "/etc/haproxy/haproxy.cfg"
    owner: root
    group: root
    mode: "0644"

- name: Stat local map file
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ role_path }}/templates/haproxy-{{ haproxy_config }}.map"
  register: map_exists

- name: Stat local ws-map file
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ role_path }}/templates/haproxy-{{ haproxy_config }}-ws.map"
  register: ws_map_exists

- name: Copy map file
  when: map_exists.stat.exists
  notify: Restart haproxy
  block:
    - name: Create map folder
      become: true
      ansible.builtin.file:
        path: "/etc/haproxy/maps"
        owner: root
        group: root
        mode: "0755"
        state: directory

    - name: Copy map file
      become: true
      ansible.builtin.template:
        src: "haproxy-{{ haproxy_config }}.map"
        dest: "/etc/haproxy/maps/host.map"
        owner: root
        group: root
        mode: "0644"

    - name: Copy ws-map file
      when: ws_map_exists.stat.exists
      become: true
      ansible.builtin.template:
        src: "haproxy-{{ haproxy_config }}-ws.map"
        dest: "/etc/haproxy/maps/host-ws.map"
        owner: root
        group: root
        mode: "0644"

- name: Test haproxy config
  ansible.builtin.command: /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c

- name: Open http ports in ufw
  become: true
  community.general.ufw:
    rule: allow
    proto: tcp
    port: "{{ item }}"
    comment: External - haproxy
  loop:
    - 443
