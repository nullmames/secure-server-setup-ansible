---
# BNBChain structure with host networking
# https://github.com/bnb-chain/bsc/pkgs/container/bsc
# Ports:
#  - Geth: 12145 (rpc), 12146 (ws), 30311 (p2p - public), 12160 (metrics)

- name: Get latest BNB Chain version
  ansible.builtin.uri:
    url: https://api.github.com/repos/bnb-chain/bsc/releases/latest
    return_content: true
    body_format: json
  register: bnbchain_version

- name: Ensure bnb-geth-data and bnb-geth-config exists
  ansible.builtin.file:
    path: "{{ folder }}/{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - bnb-geth-data
    - bnb-geth-config

- name: Check if bnb-geth-data is populated
  ansible.builtin.find:
    paths: "{{ folder }}/bnb-geth-data"
    file_type: any
    hidden: false
  register: bnb_geth_data

- name: Download and extract snapshot
  when: bnb_geth_data.matched == 0
  block:
    - name: Get latest snapshot json
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/48Club/bsc-snapshots/main/data.json
        return_content: true
        body_format: json
      register: bnbchain_snapshot_content

    - name: Download snapshot
      ansible.builtin.shell:
        cmd: "aria2c {{ aria2c_options }} -d {{ user_dir }} --checksum=sha-256={{ (bnbchain_snapshot_content.content | from_json).geth.local.sha256 }} -o bnb-geth-snapshot.tar.zst {{ (bnbchain_snapshot_content.content | from_json).geth.local.link }}"
      args:
        chdir: "{{ user_dir }}"
        creates: "{{ user_dir }}/bnb-geth-snapshot.tar.zst"
        executable: /bin/bash
      async: 86400
      poll: 0
      register: file_download

    - name: Check if download has completed
      ansible.builtin.async_status:
        jid: "{{ file_download.ansible_job_id }}"
      register: file_download_result
      until: file_download_result.finished
      delay: 60 # Check once a minute
      retries: 1440 # for 24 hours

    - name: Extract snapshot
      ansible.builtin.unarchive:
        src: "{{ user_dir }}/bnb-geth-snapshot.tar.zst"
        dest: "{{ folder }}/bnb-geth-data"
        extra_opts:
          - --zstd
          - --strip-components 1
      # ansible.builtin.shell: "tar -xf {{ user_dir }}/bnb-geth-snapshot.tar.zst -C {{ folder }}/bnb-geth-data --strip-components 1"
      # environment:
      #   PATH: "{{ path }}"

- name: Download and extract mainnet.zip
  ansible.builtin.get_url:
    url: "https://github.com/bnb-chain/bsc/releases/download/{{ bnbchain_version.json.tag_name }}/mainnet.zip"
    dest: "{{ folder }}/bnb-geth-config/mainnet.zip"
    mode: "0644"
  register: bnb_geth_config

- name: Unzip mainnet.zip configuration
  when: bnb_geth_config.changed
  ansible.builtin.unarchive:
    src: "{{ folder }}/bnb-geth-config/mainnet.zip"
    dest: "{{ folder }}/bnb-geth-config/"
    remote_src: true

- name: Create a network
  community.docker.docker_network:
    name: "{{ network }}_net"

- name: Run bnb-geth container
  community.docker.docker_container:
    name: "{{ execution_container_name }}"
    image: ghcr.io/bnb-chain/bsc:{{ bnbchain_version.json.tag_name[1:] }}
    restart_policy: unless-stopped
    state: started
    stop_timeout: 600
    networks:
      - name: "{{ network }}_net"
    ports:
      # p2p
      - "12103:12103"
      # rpc
      - "127.0.0.1:12145:12145"
      - "{{ nebula_internal_ip_addr }}:12145:12145"
    pull: true
    volumes:
      - "{{ folder }}/bnb-geth-data:/bsc/node"
      - "{{ folder }}/bnb-geth-config:/bsc/config"
      - /etc/localtime:/etc/localtime:ro
    command:
      # General
      - --datadir=/bsc/node
      - --port=12103
      - --syncmode=full
      - --state.scheme=path # (hash or path)
      ## Interfaces
      # HTTP/RPC
      - --http
      - --http.port=12145
      - --http.addr=0.0.0.0
      - --http.vhosts=*
      - --http.corsdomain=*
      - --http.api=debug,eth,txpool,net,engine,web3
      # Metrics
      - --metrics
      - --metrics.addr=0.0.0.0
      - --metrics.port=12160
      - --metrics.expensive
      # Transaction & Chain Specific
      - --cache=8000
      - --history.transactions=0
      - --tries-verify-mode=none
      - --rpc.allow-unprotected-txs
      - --ipcdisable
      # RMN
      - --rpc.batch-response-max-size=300000000 # Per RMN Documentation
      - --rpc.txfeecap=0 # Per RMN Documentation
